apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'

// Command line
// gradle init --type java-library
// gradle cleanEclipse
// gradle build
// gradle eclipse

  repositories {
      mavenLocal()
      mavenCentral()
  }
  def jerseyVersion='1.9.1'
  def restEasyVersion='3.0.4.Final'
  def oltuVersion='1.0.0'
     
  dependencies {
    providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
    
    compile 'com.sun.xml.ws:jaxws-rt:2.2.10'
    
    //compile 'com.sun.jersey:jersey-server:'+jerseyVersion
    //compile 'com.sun.jersey:jersey-json:'+jerseyVersion
    compile 'org.jboss.resteasy:resteasy-jaxrs:'+restEasyVersion
    compile 'org.jboss.resteasy:resteasy-jaxb-provider:'+restEasyVersion
    compile 'org.jboss.resteasy:resteasy-jackson-provider:'+restEasyVersion
    
    
    compile 'org.apache.oltu.oauth2:org.apache.oltu.oauth2.client:'+oltuVersion
    compile 'org.apache.oltu.oauth2:org.apache.oltu.oauth2.authzserver:'+oltuVersion
    compile 'org.apache.oltu.oauth2:org.apache.oltu.oauth2.resourceserver:'+oltuVersion
    
    runtime 'javax.servlet:jstl:1.1.2'
    
    testCompile 'junit:junit:4.12'
  }
   
  war {    
      webInf { from 'src/main/webapp/WEB-INF'} // adds a file-set to the WEB-INF dir.    
      classpath fileTree('src/main/webapp/WEB-INF/lib') // adds a file-set to the WEB-INF/lib dir.
      webXml = file('src/main/webapp/WEB-INF/web.xml') // copies a file to WEB-INF/web.xml        
      // from('src/main/webapp') { include ('bootstrap/css/*.css', 'bootstrap/js/*.js', 'bootstrap/img/*.*')  }
  }
   
  task deploy (dependsOn: war){
    copy {
        from "build/libs"
        into "D:/Apache Software Foundation/Tomcat 8.0/webapps"
        include "*.war"
    }
  }

project.ext {
  genSrcDir = projectDir.absolutePath + '/src/main/java'
}
compileJava {
  options.compilerArgs += ['-s', project.genSrcDir]
}
compileJava.doFirst {
  task createGenDir << {
    ant.mkdir(dir: project.genSrcDir)
  }
  createGenDir.execute()
  println 'createGenDir DONE'
}
//eclipse.classpath.file.whenMerged {
//  classpath ->    def genSrc = new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/main/java', null)
//  classpath.entries.add(genSrc)
//}
task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    compileJava.execute()
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [kind: 'src', path: 'src/main/java']);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}